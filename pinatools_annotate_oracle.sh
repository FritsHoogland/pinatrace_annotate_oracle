if [ -z "$1" ]; then
	echo "$0 requires a file generated by pin tools pinatrace as the first argument."
	exit 1
fi
FILE=$1
if [ ! -f memory_ranges.csv ]; then
	echo "$0 requires csv files generated by 1_generate_memory_ranges.sql, 2_generate_memory_ranges_xtables.sql."
	echo "optionally pga details can be generated by 0_get_pga_detail.sql and 3_generate_memory_ranges_pga.sql."
	echo
	echo "run these AFTER you have profiled the session using pinatrace."
	exit 1
fi
O_BINARY=/u01/app/oracle/product/12.1.0.2/dbhome_1/bin/oracle
# create lookup table for the memory ranges
sqlite3 memory_ranges.db "drop table if exists memory_ranges;"
sqlite3 memory_ranges.db "create table memory_ranges (start_address integer, end_address integer, memory_area varchar(30), description varchar(100));"
sqlite3 memory_ranges.db ".import memory_ranges.csv         memory_ranges"
sqlite3 memory_ranges.db ".import memory_ranges_xtables.csv memory_ranges"
sqlite3 memory_ranges.db ".import memory_ranges_pga.csv     memory_ranges"
#
declare -a IPCACHE
echo "function:Read/Write:memory address(annotation):size"
cat $FILE | grep -v ^# | while read IP RW MEM_ADDR SIZE UNKN; do
	# remove last char(':')
	IP=${IP::-1}
	[ -z "${IPCACHE[$((IP))]}" ] && IPCACHE[$((IP))]=$(addr2line -p -f -e $O_BINARY $IP | awk '{ print $1 }')
        echo "${IPCACHE[$((IP))]}:$RW:$MEM_ADDR($(sqlite3 memory_ranges.db "select memory_area, description from memory_ranges where $((MEM_ADDR)) between start_address and end_address-1;" | tr '\n' ' ')):$SIZE"
done
